//go:generate controller-gen object paths="."

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgdbops,scope=Namespaced
// +groupName=bestgres.io

// BGDbOps is the Schema for the bgdbops API
type BGDbOps struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   BGDbOpsSpec   `json:"spec,omitempty"`
	Status BGDbOpsStatus `json:"status,omitempty"`
}

// BGDbOpsSpec defines the desired state of BGDbOps
type BGDbOpsSpec struct {
	// Reference to the BGCluster
	// +kubebuilder:validation:Required
	BGCluster string `json:"bgCluster"`
	// Operation to perform (e.g., benchmark, repack, restart, vacuum)
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Enum=benchmark;repack;restart;vacuum
	Op string `json:"op"`
	// Maximum number of retries for the operation
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:default=3
	MaxRetries int `json:"maxRetries,omitempty"`
	// Benchmark operation details
	// +kubebuilder:validation:Optional
	Benchmark *BenchmarkSpec `json:"benchmark,omitempty"`
	// Repack operation details
	// +kubebuilder:validation:Optional
	Repack *RepackSpec `json:"repack,omitempty"`
	// Restart operation details
	// +kubebuilder:validation:Optional
	Restart *RestartSpec `json:"restart,omitempty"`
	// Vacuum operation details
	// +kubebuilder:validation:Optional
	Vacuum *VacuumSpec `json:"vacuum,omitempty"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGDbOpsSpec) DeepCopyInto(out *BGDbOpsSpec) {
    *out = *in
    if in.Benchmark != nil {
        in, out := &in.Benchmark, &out.Benchmark
        *out = new(BenchmarkSpec)
        (*in).DeepCopyInto(*out)
    }
    if in.Repack != nil {
        in, out := &in.Repack, &out.Repack
        *out = new(RepackSpec)
        (*in).DeepCopyInto(*out)
    }
    if in.Restart != nil {
        in, out := &in.Restart, &out.Restart
        *out = new(RestartSpec)
        **out = **in
    }
    if in.Vacuum != nil {
        in, out := &in.Vacuum, &out.Vacuum
        *out = new(VacuumSpec)
        (*in).DeepCopyInto(*out)
    }
}

func (in *BenchmarkSpec) DeepCopyInto(out *BenchmarkSpec) {
    *out = *in
    out.PgBench = in.PgBench
}

func (in *RepackSpec) DeepCopyInto(out *RepackSpec) {
    *out = *in
    if in.Tables != nil {
        in, out := &in.Tables, &out.Tables
        *out = make([]string, len(*in))
        copy(*out, *in)
    }
}

func (in *VacuumSpec) DeepCopyInto(out *VacuumSpec) {
    *out = *in
    if in.Tables != nil {
        in, out := &in.Tables, &out.Tables
        *out = make([]string, len(*in))
        copy(*out, *in)
    }
}

// BenchmarkSpec defines the details for a benchmark operation
type BenchmarkSpec struct {
	// +kubebuilder:validation:Required
	Type string `json:"type"`
	// +kubebuilder:validation:Required
	PgBench PgBenchSpec `json:"pgbench"`
	// +kubebuilder:validation:Required
	ConnectionType string `json:"connectionType"`
}

// PgBenchSpec defines the details for a pgbench benchmark
type PgBenchSpec struct {
	// +kubebuilder:validation:Required
	DatabaseSize string `json:"databaseSize"`
	// +kubebuilder:validation:Required
	Duration string `json:"duration"`
	// +kubebuilder:validation:Minimum=1
	ConcurrentClients int `json:"concurrentClients"`
	// +kubebuilder:validation:Minimum=1
	Threads int `json:"threads"`
}

// RepackSpec defines the details for a repack operation
type RepackSpec struct {
	Tables []string `json:"tables"`
}

// RestartSpec defines the details for a restart operation
type RestartSpec struct {
	Force bool `json:"force"`
}

// VacuumSpec defines the details for a vacuum operation
type VacuumSpec struct {
	Tables []string `json:"tables"`
}

// BGDbOpsStatus defines the observed state of BGDbOps
type BGDbOpsStatus struct {
	// Status of the operation
	Status string `json:"status"`
	// Number of retries performed
	// +kubebuilder:validation:Minimum=0
	Retries int `json:"retries"`
}

func (in *BGDbOpsStatus) DeepCopyInto(out *BGDbOpsStatus) {
    *out = *in
}

// +kubebuilder:object:root=true

// BGDbOpsList contains a list of BGDbOps
type BGDbOpsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BGDbOps `json:"items"`
}

func init() {
	SchemeBuilder.Register(&BGDbOps{}, &BGDbOpsList{})
}
