//go:generate controller-gen object paths="."

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// BGShardedDbOps is the Schema for the bgshardeddbops API
// This custom resource definition represents a database operation to be performed on a sharded cluster
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgshardeddbops,scope=Namespaced
// +groupName=bestgres.io
type BGShardedDbOps struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	// Spec defines the desired state of BGShardedDbOps
	Spec BGShardedDbOpsSpec `json:"spec,omitempty"`
	// Status defines the observed state of BGShardedDbOps
	Status BGShardedDbOpsStatus `json:"status,omitempty"`
}

// BGShardedDbOpsSpec defines the desired state of BGShardedDbOps
// It contains the configuration for the sharded database operation
type BGShardedDbOpsSpec struct {
	// BGShardedCluster is the name of the target BGShardedCluster
	// +kubebuilder:validation:Required
	BGShardedCluster string `json:"bgShardedCluster"`

	// BGDbOpsClusterSpec defines the operation to be performed on the sharded cluster
	// +kubebuilder:validation:Required
	BGDbOpsClusterSpec BGDbOpsClusterSpec `json:"bgDbOpsSpec"`
}

// BGDbOpsClusterSpec defines the desired state of a database operation on a sharded cluster
// This is separate from BGDbOpsSpec to allow for potential differences in sharded operations
type BGDbOpsClusterSpec struct {
	// Op specifies the operation to perform (e.g., benchmark, repack, restart, vacuum)
	// +kubebuilder:validation:Required
	// +kubebuilder:validation:Enum=benchmark;repack;restart;vacuum
	Op string `json:"op"`

	// MaxRetries specifies the maximum number of retries for the operation
	// +kubebuilder:validation:Minimum=0
	// +kubebuilder:default=3
	MaxRetries int `json:"maxRetries,omitempty"`

	// Benchmark operation details, only used when Op is "benchmark"
	// +kubebuilder:validation:Optional
	Benchmark *BenchmarkSpec `json:"benchmark,omitempty"`

	// Repack operation details, only used when Op is "repack"
	// +kubebuilder:validation:Optional
	Repack *RepackSpec `json:"repack,omitempty"`

	// Restart operation details, only used when Op is "restart"
	// +kubebuilder:validation:Optional
	Restart *RestartSpec `json:"restart,omitempty"`

	// Vacuum operation details, only used when Op is "vacuum"
	// +kubebuilder:validation:Optional
	Vacuum *VacuumSpec `json:"vacuum,omitempty"`
}

// BGShardedDbOpsStatus defines the observed state of BGShardedDbOps
// It contains information about the current status of the sharded database operation
type BGShardedDbOpsStatus struct {
	// Status represents the overall status of the operation
	Status string `json:"status"`
}

// BGShardedDbOpsList contains a list of BGShardedDbOps
// This is used by the Kubernetes API server to return multiple BGShardedDbOps objects
// +kubebuilder:object:root=true
type BGShardedDbOpsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BGShardedDbOps `json:"items"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGShardedDbOps) DeepCopyInto(out *BGShardedDbOps) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGShardedDbOpsSpec) DeepCopyInto(out *BGShardedDbOpsSpec) {
	*out = *in
	in.BGDbOpsClusterSpec.DeepCopyInto(&out.BGDbOpsClusterSpec)
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGDbOpsClusterSpec) DeepCopyInto(out *BGDbOpsClusterSpec) {
	*out = *in
	if in.Benchmark != nil {
		in, out := &in.Benchmark, &out.Benchmark
		*out = new(BenchmarkSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Repack != nil {
		in, out := &in.Repack, &out.Repack
		*out = new(RepackSpec)
		(*in).DeepCopyInto(*out)
	}
	if in.Restart != nil {
		in, out := &in.Restart, &out.Restart
		*out = new(RestartSpec)
		**out = **in
	}
	if in.Vacuum != nil {
		in, out := &in.Vacuum, &out.Vacuum
		*out = new(VacuumSpec)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGShardedDbOpsList) DeepCopyInto(out *BGShardedDbOpsList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]BGShardedDbOps, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BGShardedDbOpsStatus) DeepCopyInto(out *BGShardedDbOpsStatus) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BGShardedDbOps.
func (in *BGShardedDbOps) DeepCopy() *BGShardedDbOps {
	if in == nil {
		return nil
	}
	out := new(BGShardedDbOps)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BGShardedDbOps) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BGShardedDbOpsList.
func (in *BGShardedDbOpsList) DeepCopy() *BGShardedDbOpsList {
	if in == nil {
		return nil
	}
	out := new(BGShardedDbOpsList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *BGShardedDbOpsList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

func init() {
	SchemeBuilder.Register(&BGShardedDbOps{}, &BGShardedDbOpsList{})
}